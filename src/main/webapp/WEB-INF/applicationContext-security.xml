<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
            http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
            http://www.springframework.org/schema/security
            http://www.springframework.org/schema/security/spring-security-3.2.xsd
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context-3.2.xsd
            ">
    
    <context:property-placeholder location="WEB-INF/spring.properties" />

    <!-- <security:global-method-security secured-annotations="enabled" /> -->

    <bean id="myAuthenticationSuccessHandler" 
            class="org.poormanscastle.technologies.spring.security.web.authenticationHandlers.MyAuthenticationSuccessHandlerImpl" />
    
    <bean id="myAuthenticationFailureHandler"
          class="org.poormanscastle.technologies.spring.security.web.authenticationHandlers.MyAuthenticationFailureHandlerImpl">
        <constructor-arg name="failureUrl" value="${spring.security.web.authentication.failure.url}" />
    </bean>
    
    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.access.vote.RoleVoter" />
                <bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
                <!-- add this voter when using use-expression="true" in http, thus using expressions like hasRole(), etc. -->
                <bean class="org.springframework.security.web.access.expression.WebExpressionVoter" />
            </list>
        </constructor-arg>
    </bean>
    
    <bean id="logoutRedirectToAny" class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
        <property name="targetUrlParameter" value="redirectTo" />
    </bean>
    
    <!-- http start tag for CAS -->
    <security:http auto-config="true" entry-point-ref="casEntryPoint" use-expressions="true" access-decision-manager-ref="accessDecisionManager">
    <!-- http start tag for unanimouns AccessDecisionManager, e.g. when using remember-me with re-authentication -->
    <!--security:http auto-config="true" access-decision-manager-ref="accessDecisionManager" access-denied-page="/custom_login" use-expressions="true" -->
    <!-- http start tag for form and basic authentication. -->
    <!-- <security:http auto-config="true"> -->
    <!-- http start tag for digest authentication -->
    <!-- <security:http auto-config="true" entry-point-ref="digestEntryPoint"> -->
        
        <!-- Simple login form using AuthenticationSuccessHandler and AuthenticationFailureHandler to redirect
            user requests between requested secured resources and the login form -->
        <!--<security:form-login login-page="/custom_login" 
            authentication-success-handler-ref="myAuthenticationSuccessHandler"
            authentication-failure-handler-ref="myAuthenticationFailureHandler" />-->
        
        <!-- use Basic HTTP for authentication -->
        <!-- <security:http-basic /> -->
        
        <!-- use Digest authentication for encrypted credential exchange. Together with http-basic! -->
        <!-- <security:http-basic />
        <security:custom-filter ref="digestFilter" before="BASIC_AUTH_FILTER" /> -->
        
        <!-- Remember-me login --> 
        <security:form-login login-page="/custom_login"
            authentication-failure-handler-ref="myAuthenticationFailureHandler" />
        <security:remember-me key="someSpokenUsefulRange" />
        
        <!-- Secured web resources and required roles to access them -->
        <security:intercept-url pattern="/hello" access="hasRole('ROLE_MEC_MEMBER') or hasRole('ROLE_ADMIN')" />
        <security:intercept-url pattern="/admin/**/*" access="hasRole('ROLE_ADMIN') and isFullyAuthenticated()" />
        
        <!-- obviously needed for CAS authentication -->
        <security:custom-filter position="CAS_FILTER" ref="casFilter" />
        
        <!-- integrate CookieClearingLogoutHandler into logout process -->
        <security:logout delete-cookies="JSESSIONID" success-handler-ref="logoutRedirectToAny" />
    </security:http>
    
    <!-- beans for digest authentication -->
    <bean id="digestFilter" class="org.springframework.security.web.authentication.www.DigestAuthenticationFilter">
        <!-- use this line together with the default user-service in the standard authentication manager -->
        <!-- <property name="userDetailsService" ref="userService" /> -->
        <!-- use this line with the custom user details manager -->
        <property name="userDetailsService" ref="inMemoryUserServiceWithCustomerUser" />
        <property name="authenticationEntryPoint" ref="digestEntryPoint" />
    </bean>
    <bean id="digestEntryPoint" class="org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint">
        <property name="realmName" value="poormanscastle-realm" />
        <property name="key" value="anotherSpokenUsefulRange" />
    </bean>


    <!-- for CAS integration the alias authenticationManager needs to be defined (?) -->
    <security:authentication-manager alias="authenticationManager">
    <!-- for all other cases than CAS integration, this seems to be valid -->
    <!-- <security:authentication-manager> -->

        <!-- CAS requires the casAuthenticationProvider -->
        <security:authentication-provider ref="casAuthenticationProvider" />

        <!-- other use cases can do with the standard authentication provider -->
        <!-- <security:authentication-provider user-service-ref="inMemoryUserServiceWithCustomerUser" /> -->

        <!--    this authentication provider creates a UserDetails object implemented by the class:
                org.springframework.security.core.userdetails.User
                simple in-memory storage of pre-configured user base -->
        <!-- <security:authentication-provider>
            <security:user-service id="userService">
                <security:user authorities="ROLE_MEC_MEMBER, ROLE_ADMIN" name="kai" password="asdf"/>
                <security:user authorities="ROLE_MEC_MEMBER" name="denis" password="fdsa"/>
                <security:user authorities="ROLE_TRANSITIONS_MEMBER" name="thorsten" password="vangelis"/>
            </security:user-service>
        </security:authentication-provider> -->
    </security:authentication-manager>
    
    <!-- for CAS authentication, some serviceProperties are required -->
    <bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties">
        <property name="service" value="https://localhost:9443/SpringSecurity/j_spring_cas_security_check" />
        <property name="sendRenew" value="false" />
    </bean>
    
    <bean id="casFilter" class="org.springframework.security.cas.web.CasAuthenticationFilter">
        <property name="authenticationManager" ref="authenticationManager" />
    </bean>
    
    <bean id="casEntryPoint" class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">
        <property name="loginUrl" value="https://localhost:7443/cas/login" />
        <property name="serviceProperties" ref="serviceProperties" />
    </bean>
    
    <bean id="casAuthenticationProvider" class="org.springframework.security.cas.authentication.CasAuthenticationProvider">
        <property name="authenticationUserDetailsService">
            <bean class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
                <constructor-arg ref="inMemoryUserServiceWithCustomerUser" />
            </bean>
        </property>
        <property name="serviceProperties" ref="serviceProperties" />
        <property name="ticketValidator">
            <bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
                <constructor-arg index="0" value="https://localhost:7443/cas/" />
            </bean>
        </property>
        <property name="key" value="some_id_for_this_cas_prov" />
    </bean>
    
    <bean id="inMemoryUserServiceWithCustomerUser" class="org.poormanscastle.technologies.spring.security.domain.CustomInMemoryUserDetailsManager">
        <constructor-arg>
            <list>
                <bean class="org.poormanscastle.technologies.spring.security.domain.MyUser">
                    <constructor-arg value="georg.federmann" />
                    <constructor-arg value="asdf" />
                    <constructor-arg>
                        <list>
                            <bean class="org.springframework.security.core.authority.SimpleGrantedAuthority">
                                <constructor-arg value="ROLE_ADMIN" />
                            </bean>
                        </list>
                    </constructor-arg>
                    <constructor-arg value="Bean" />
                </bean>
            </list>
        </constructor-arg>
    </bean>

</beans>